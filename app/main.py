from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QUrl, QDesktopServices
from templates.ui import Ui_MainWindow
from templates.dialog import Ui_Dialog
from materialProperties.properties import properties
from materialProperties.properties import diameters
from materialProperties.properties import translate
import requests
import json
from winreg import ConnectRegistry, HKEY_CURRENT_USER, OpenKey, KEY_ALL_ACCESS, SetValueEx, REG_MULTI_SZ


class Main(QtWidgets.QMainWindow):
    """
    Main script class handling gui actions

    Attributes
    ----------
    fileExtension : str
        File extension used by application
    host : str
        Web application host address
    maxMenuRecentFiles : int
        Maximum number of recent files displayed in the file menu
    maxRecentFiles : int
        Maximum number of recent files displayed in the Main Screen container
    obtainedResults_signal : pyqtSignal
        Signal emitted on successful calculation request
    error_signal : pyqtSignal
        Signal emitted to display an error
    logout_signal : pyqtSignal
        Signal emitted to clear the interface before logging user out
    """

    fileExtension = '.rcalc'
    host = 'http://127.0.0.1:8000'
    maxMenuRecentFiles = 5
    maxRecentFiles = 30

    obtainedResults_signal = QtCore.pyqtSignal()
    error_signal = QtCore.pyqtSignal(str)
    logout_signal = QtCore.pyqtSignal()

    def __init__(self):
        """
        Call parent init method and UI construct methods

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        super().__init__()
        self.ui = Ui_MainWindow()
        self.dialog_window = Ui_Dialog()

        self.recentFileActions = []
        self.last_results = None
        self.line_edits = None
        self.combo_boxes = None
        self.text_browsers = None
        self.report_buttons = None
        self.status_labels = None

        self.login_worker = Worker(fn=self.login)
        self.logout_worker = Worker(fn=self.logout)
        self.close_worker = Worker(fn=self.logout, closeAfter=True)
        self.calculate_worker = Worker(fn=self.getCalculationResults)

        self.obtainedResults_signal.connect(self.loadResults)
        self.error_signal.connect(self.displayError)
        self.logout_signal.connect(self.clearInterface)

        self.setupUi()
        self.setupDialog()
        self.loadImgs()
        self.loadData()
        self.createRecentActions()
        self.createRecentMenus()

        self.session = requests.session()

    def setupUi(self):
        """
        Construct window's ui elements and create buttons and menu actions connections.

        Call setupUi method from imported, generated by puic GUI file constructing window's
        ui elements, then create connections between button and menu action elements and methods

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        self.ui.setupUi(self)

        self.ui.login_btn.clicked.connect(self.login_worker.start)
        self.ui.signup_btn.clicked.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/accounts/signup/')))

        self.ui.plate_btn.clicked.connect(lambda: self.showElement(self.ui.plate_btn))
        self.ui.beam_btn.clicked.connect(lambda: self.showElement(self.ui.beam_btn))
        self.ui.column_btn.clicked.connect(lambda: self.showElement(self.ui.column_btn))
        self.ui.foot_btn.clicked.connect(lambda: self.showElement(self.ui.foot_btn))

        self.ui.recently_opened_list.itemDoubleClicked.connect(
            lambda item: self.openFile(filePath=item.data(QtCore.Qt.UserRole)))

        self.ui.menuResources.actions()[0].triggered.connect(dialog.show)

        self.ui.p_report_btn.clicked.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/results/1')))
        self.ui.b_report_btn.clicked.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/results/1')))
        self.ui.c_report_btn.clicked.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/results/1')))
        self.ui.f_report_btn.clicked.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/results/1')))

        self.ui.p_run_btn.clicked.connect(self.calculate_worker.start)
        self.ui.b_run_btn.clicked.connect(self.calculate_worker.start)
        self.ui.c_run_btn.clicked.connect(self.calculate_worker.start)
        self.ui.f_run_btn.clicked.connect(self.calculate_worker.start)

        self.ui.p_span_section_radioBtn.toggled.connect(self.ui.p_span_elementDraw.raise_)
        self.ui.p_sup_section_radioBtn.toggled.connect(self.ui.p_sup_elementDraw.raise_)
        self.ui.b_span_section_radioBtn.toggled.connect(self.ui.b_span_elementDraw.raise_)
        self.ui.b_sup_section_radioBtn.toggled.connect(self.ui.b_sup_elementDraw.raise_)

        self.ui.actionClose.triggered.connect(self.close_worker.start)
        self.ui.actionSave.triggered.connect(self.saveFile)
        self.ui.actionOpen.triggered.connect(self.openFile)
        self.ui.actionLog_Out.triggered.connect(self.logout_worker.start)
        self.ui.actionMain_Screen.setEnabled(False)
        self.ui.actionMain_Screen.triggered.connect(lambda: self.ui.stackedWidget.setCurrentIndex(1))
        self.ui.actionHome.triggered.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}')))
        self.ui.actionResults.triggered.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/results/')))
        self.ui.actionProfile.triggered.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/profile/')))
        self.ui.actionLog_In.triggered.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/accounts/login/')))
        self.ui.actionSign_Up.triggered.connect(lambda: QDesktopServices.openUrl(QUrl(f'{Main.host}/accounts/signup/')))

        double_regex = QtCore.QRegExp('[+-]?([0-9]*[.])?[0-9]+')
        double_validator = QtGui.QRegExpValidator(double_regex)

        self.line_edits = self.ui.elements_tabs.findChildren(QtWidgets.QLineEdit)
        self.combo_boxes = self.ui.elements_tabs.findChildren(QtWidgets.QComboBox)
        self.text_browsers = self.ui.results_stackedWidget.findChildren(QtWidgets.QTextBrowser)
        self.report_buttons = [button for button in self.ui.results_stackedWidget.findChildren(QtWidgets.QPushButton)
                               if button.objectName().endswith('report_btn')]
        self.status_labels = [label for label in self.ui.stackedWidget.findChildren(QtWidgets.QLabel) if
                                      label.objectName().endswith('_status_label')]

        self.ui.f_rect_section_radioBtn.clicked.connect(lambda: self.error_signal.emit("Function not available yet."))

        for lineEdit in self.line_edits:
            lineEdit.setValidator(double_validator)

    def setupDialog(self):
        """
        Construct dialog window's ui elements and load data

        Call setupDialog method from imported, generated by puic GUI file constructing dialog window's
        ui elements, then load data from materialProperties module and images

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        self.dialog_window.setupUi(dialog)
        for material_property in properties:
            row = 0
            col = 0
            table = self.dialog_window.tabWidget.findChild(QtWidgets.QTableWidget, material_property)
            material_classes = list(properties[material_property])

            for key in material_classes[0].value.keys():
                table.insertColumn(col)
                header_item = QtWidgets.QTableWidgetItem()
                header_item.setText(translate[key])
                table.setHorizontalHeaderItem(col, header_item)
                col += 1

            for material_class in material_classes:
                table.insertRow(row)
                col = 0
                for property_key in material_class.value.keys():
                    table_item = QtWidgets.QTableWidgetItem()
                    table_item.setText(str(material_class.value[property_key]))
                    table_item.setTextAlignment(4)
                    table.setItem(row, col, table_item)
                    col += 1
                row += 1

            table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)

        self.dialog_window.reinf_grade_graph.setPixmap(QtGui.QPixmap(
            f'resources/graphs/min_reinf_foot.png'))
        self.dialog_window.ah_ratio_graph.setPixmap(QtGui.QPixmap(
            f'resources/graphs/a_h_foot.png'))

    def loadData(self):
        """
        Load imported data from materialProperties module to appropriate containers in application

        Find children of tabWidget using locally defined dictionary of element core names
        and append to them imported data.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        names = {'steel': 'steel_grade', 'concr': 'concrete_class', 'exp': 'exp_class', 'diam': 'diameters'}
        combos = self.ui.elements_tabs.findChildren(QtWidgets.QComboBox)
        combosDict = {names[key]: [element for element in combos if key in element.objectName()] for key in
                      names.keys()}
        for key in combosDict.keys():
            if key == "diameters":
                for element in combosDict[key]:
                    element.addItems(str(diam) for diam in diameters)
            else:
                for element in combosDict[key]:
                    element.addItems(
                        [value_class.value[key] for value_class in properties[key]])

    def loadImgs(self):
        """
        Load button and placeholder images

        Find children of welcome page and results stack widget, load appropriate images

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        for button in self.ui.welcome_page.findChildren(QtWidgets.QPushButton):
            button.setIcon(QtGui.QIcon(f'resources/buttons/{button.objectName()}.png'))
            button.setIconSize(QtCore.QSize(200, 200))
        for drawingPlaceholder in self.ui.results_stackedWidget.findChildren(QtWidgets.QLabel):
            drawingPlaceholder.setPixmap(QtGui.QPixmap(
                f'resources/placeholders/{drawingPlaceholder.objectName().split("_elementDraw")[0]}.jpg'))

    def createRecentActions(self):
        """
        Initialize QAction objects within the container lsit

        Create n = Main.maxRecentFiles QAction objects, within a recetFileActions list

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        for i in range(Main.maxRecentFiles):
            self.recentFileActions.append(QtWidgets.QAction(self, visible=False, triggered=self.openRecentFile))

    def createRecentMenus(self):
        """
        Insert recent file objects to the file menu

        Insert n = Main.maxMenuRecentFiles QAction objects to the file menu, finally, insert a separator in the end

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        for i in range(Main.maxMenuRecentFiles):
            self.ui.menuFile.insertAction(self.ui.actionLog_Out, self.recentFileActions[i])

        self.ui.menuFile.insertSeparator(self.ui.actionLog_Out)

    def addRecentFile(self, filePath):
        """
        Add file path to the recent files list

        Specify registry location to store the information using QSettings object,
        insert the file to the beginning of the recent files list, remove files exceeding
        the maximum number, update the recent files list

        Parameters
        ----------
        filePath : str
            Path to the file

        Returns
        -------
        None
        """
        settings = QtCore.QSettings('michalkowal66', 'Reinforcement Calculator')
        files = settings.value('recentFileList', [])

        try:
            files.remove(filePath)
        except ValueError:
            pass

        files.insert(0, filePath)
        del files[Main.maxRecentFiles:]

        settings.setValue('recentFileList', files)

        self.updateRecentFiles()

    def updateRecentFiles(self):
        """
        Update lists of recently opened files

        Specify registry location of information using QSettings object,
        set appropriate information to the QAction objects (displayed name, path to the file).
        In case of file menu, after assigning the information, display only specified number of objects.
        In case of Main Screen container, clear the container, add objects one-by-one after assigning the information.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        settings = QtCore.QSettings('michalkowal66', 'Reinforcement Calculator')
        files = settings.value('recentFileList', [])

        numRecentFiles = min(len(files), Main.maxRecentFiles)
        numMenuRecentFiles = min(len(files), Main.maxMenuRecentFiles)

        for i in range(numMenuRecentFiles):
            text = QtCore.QFileInfo(files[i]).fileName()
            self.recentFileActions[i].setText(text)
            self.recentFileActions[i].setData(files[i])
            self.recentFileActions[i].setVisible(True)

        for j in range(numMenuRecentFiles, Main.maxRecentFiles):
            self.recentFileActions[j].setVisible(False)

        recently_opened = self.ui.recently_opened_list
        recently_opened.clear()
        for i in range(numRecentFiles):
            text = QtCore.QFileInfo(files[i]).fileName()
            item = QtWidgets.QListWidgetItem()
            item.setText(text)
            item.setData(QtCore.Qt.UserRole, files[i])
            recently_opened.addItem(item)

    def openRecentFile(self):
        """
        Open a file from a file menu recently opened list

        Check whether sender object contains file information, if yes, call openFile method passing object's data

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        action = self.sender()
        if action:
            self.openFile(action.data())

    def saveFile(self):
        """
        Save values from currently displayed tab to appointed location.

        Open file dialog that takes path to a save file, call ensureFormat
        on the path and save values from currently active tab to that location.
        File is saved in '.rcalc' format containing JSON object with attributes
        containing extracted values.
        File is added to the recently opened files list.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        if self.ui.stackedWidget.currentIndex() == 0:
            return False
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, *_ = QtWidgets.QFileDialog.getSaveFileName(self,
                                                             'Save File',
                                                             '',
                                                             f'Reinforcement Calculator Files (*{Main.fileExtension})',
                                                             options=options)
        if fileName:
            with open(self.ensureFormat(fileName), 'w') as f:
                element_properties = self.getElementProperties()
                if not element_properties:
                    return False
                element_info = self.getElementInfo()
                save_dict = {**element_properties, **element_info}
                save_json = json.dumps(save_dict, indent=4)
                f.write(save_json)
                status_label = self.getCurrentElement(elements_list=self.status_labels,
                                                      parent=self.getCurrentTab())
                status_label.clear()
                self.addRecentFile(self.ensureFormat(fileName))

    def ensureFormat(self, filePath):
        """
        Return path with proper file format

        Parameters
        ----------
        filePath : str
            Path to a save file

        Returns
        -------
        str
            Modified path to file with proper save file format '.rcalc'
        """
        if not filePath.endswith(Main.fileExtension):
            if '.' not in filePath:
                return filePath + Main.fileExtension
            return filePath.split('.')[0] + Main.fileExtension
        return filePath

    def openFile(self, filePath=None):
        """
        Open appropriate tab and loads values containers from appointed file.

        If filePath not specified open file dialog and parse appointed '.rcalc'
        file to Python dictionary. Open appropriate element tab and set containers
        content using dictionary values. Update recent files container.

        Parameters
        ----------
        filePath : str, optional
            Path to a save file

        Returns
        -------
        bool
        """
        if self.ui.stackedWidget.currentIndex() == 0:
            return False
        if not filePath:
            options = QtWidgets.QFileDialog.Options()
            options |= QtWidgets.QFileDialog.DontUseNativeDialog
            filePath, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', '',
                                                                f'Reinforcement Calculator Files (*{Main.fileExtension})',
                                                                options=options)
        if filePath:
            try:
                with open(filePath, 'r') as f:
                    dataFromSave = json.load(f)
            except FileNotFoundError:
                settings = QtCore.QSettings('michalkowal66', 'Reinforcement Calculator')
                files = settings.value('recentFileList', [])

                files.remove(filePath)

                key_path = "Software\\michalkowal66\\Reinforcement Calculator"
                hive = ConnectRegistry(None, HKEY_CURRENT_USER)

                reg_key = OpenKey(hive, key_path, access=KEY_ALL_ACCESS)
                SetValueEx(reg_key, 'recentFileList', 0, REG_MULTI_SZ, files)

                self.updateRecentFiles()
                return False
            else:
                element = self.ui.elements_tabs.findChild(QtWidgets.QWidget, dataFromSave['element'])
                if self.ui.stackedWidget.currentIndex() == 1:
                    self.ui.stackedWidget.setCurrentIndex(2)
                self.ui.elements_tabs.setCurrentWidget(element)
                for dataKey in dataFromSave['data'].keys():
                    if dataKey.endswith('lineEdit'):
                        element.findChild(QtWidgets.QLineEdit, dataKey).setText(str(dataFromSave['data'][dataKey]))
                    elif dataKey.endswith('combo'):
                        element.findChild(QtWidgets.QComboBox, dataKey).setCurrentText(dataFromSave['data'][dataKey])
                    elif dataKey.endswith('radioBtn'):
                        element.findChild(QtWidgets.QRadioButton, dataKey).setChecked(dataFromSave['data'][dataKey])
                for infoKey in dataFromSave['info'].keys():
                    self.ui.results_stackedWidget.findChild(QtWidgets.QTextBrowser, infoKey).setPlainText(
                        dataFromSave['info'][infoKey])

                status_label = self.getCurrentElement(elements_list=self.status_labels, parent=element)
                status_label.clear()

                self.addRecentFile(filePath)
                self.disableReportButtons(current_tab=self.ui.results_stackedWidget.currentWidget())

                return True

    def showElement(self, buttonClicked):
        """
        Take PyQt5 button object and change window view to appropriate tab

        Strip core name of button representing related element, find tab having corresponding
        element name and set current widget of tab widget to that element and current widget
        of stacked widget to main page.

        Parameters
        ----------
        buttonClicked : PyQt5.QtWidgets.QPushButton object
            PyQt5 button object

        Returns
        -------
        None
        """
        element, _ = buttonClicked.objectName().split('_btn')
        element_tab = self.ui.elements_tabs.findChild(QtWidgets.QWidget, f'{element}_tab')
        self.ui.elements_tabs.setCurrentWidget(element_tab)
        self.ui.stackedWidget.setCurrentWidget(self.ui.main_page)

    def getElementProperties(self):
        """
        Read and return parameters of the current element

        Access current element and check whether all information was provided, display error if not.
        Save element's parameters to a dictionary according to a set scheme.
        Clear current status label. return the dictionary containing parameters of the element.

        Parameters
        ----------
        None

        Returns
        -------
        dict
        """
        current_tab = self.getCurrentTab()
        status_label = self.getCurrentElement(elements_list=self.status_labels, parent=current_tab)
        for lineEdit in current_tab.findChildren(QtWidgets.QLineEdit):
            if lineEdit.isEnabled():
                if not lineEdit.text():
                    self.error_signal.emit("No box can be left empty. Action was interrupted.")
                    return False

        element_properties = {
            'element': current_tab.objectName(),
            'data': {
                **{lineEdit.objectName(): float(lineEdit.text()) for lineEdit in
                   current_tab.findChildren(QtWidgets.QLineEdit) if lineEdit.isEnabled()},
                **{comboBox.objectName(): comboBox.currentText() for comboBox in
                   current_tab.findChildren(QtWidgets.QComboBox)},
                **{radioButton.objectName(): radioButton.isChecked() for radioButton in
                   current_tab.findChildren(QtWidgets.QRadioButton)}
            }
        }
        status_label.clear()

        return element_properties

    def getElementInfo(self):
        """
        Read and return information about the current element

        Save element's information to a dictionary according to a set scheme.
        Return the dictionary containing information about the element.

        Parameters
        ----------
        None

        Returns
        -------
        dict
        """
        element_info = {
            'info': {
                **{textBrowser.objectName(): textBrowser.toPlainText()
                   for textBrowser in
                   self.ui.results_stackedWidget.currentWidget().findChildren(QtWidgets.QTextBrowser)}
            }
        }

        return element_info

    def loadDemo(self):
        """
        Connect demo elements to files, link with open file method

        Set data to list view items which will be passed to open file method,
        link menu file actions trigger with open file method.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        self.ui.recently_opened_list.item(0).setData(QtCore.Qt.UserRole, 'demo/beam_span_example.rcalc')
        self.ui.recently_opened_list.item(1).setData(QtCore.Qt.UserRole, 'demo/beam_support_example.rcalc')
        self.ui.recently_opened_list.item(2).setData(QtCore.Qt.UserRole, 'demo/column_example.rcalc')
        self.ui.recently_opened_list.item(3).setData(QtCore.Qt.UserRole, 'demo/foot_example.rcalc')
        self.ui.recently_opened_list.item(4).setData(QtCore.Qt.UserRole, 'demo/plate_example.rcalc')
        self.ui.menuFile.actions()[5].triggered.connect(
            lambda: self.openFile(filePath='demo/beam_span_example.rcalc'))
        self.ui.menuFile.actions()[6].triggered.connect(
            lambda: self.openFile(filePath='demo/beam_support_example.rcalc'))
        self.ui.menuFile.actions()[7].triggered.connect(
            lambda: self.openFile(filePath='demo/column_example.rcalc'))
        self.ui.menuFile.actions()[8].triggered.connect(
            lambda: self.openFile(filePath='demo/foot_example.rcalc'))
        self.ui.menuFile.actions()[9].triggered.connect(
            lambda: self.openFile(filePath='demo/plate_example.rcalc'))

    def login(self):
        """
        Log the user in using provided credentials

        Read user's credentials, make a request to the application login dedicated URL.
        Store the information about the session in the instance's session parameter.
        On a successful request (response status code = 200), clean and prepare the GUI, display Main Screen.
        When encountering an error while making request or receiving a status code different than 200, display an error.

        Parameters
        ----------
        None

        Returns
        -------
        bool
        """
        self.ui.login_btn.setEnabled(False)

        username = self.ui.username_lineEdit.text()
        password = self.ui.password_lineEdit.text()
        try:
            token = self.session.get(f'{Main.host}/auth-app-user/')
            response = self.session.post(f'{Main.host}/auth-app-user/',
                                         data={
                                             'username': username,
                                             'password': password,
                                             'csrfmiddlewaretoken': token})
        except Exception:
            self.error_signal.emit("Couldn\'t establish server connection.")
            self.ui.login_btn.setEnabled(True)
            return False

        if response.status_code == 200:
            self.ui.login_status_label.clear()
            self.ui.password_lineEdit.clear()
            self.ui.username_lineEdit.clear()

            self.updateRecentFiles()
            self.ui.login_btn.setEnabled(True)
            self.ui.actionMain_Screen.setEnabled(True)
            self.ui.stackedWidget.setCurrentIndex(1)
            return True

        else:
            self.error_signal.emit("Failed to log in.")
            self.ui.login_btn.setEnabled(True)
            return False

    def clearStatusLabels(self):
        """
        Clear all status labels of the GUI

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        for label in self.status_labels:
            label.clear()

    def clearInterface(self):
        """
        Clear components of the GUI

        Set current screen to the Login Screen.
        Clear all status labels, line edits, disable all report buttons, select default items of combo boxes,
        set default messages to the text boxes, check default radio buttons.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        self.ui.stackedWidget.setCurrentIndex(0)
        self.ui.actionMain_Screen.setEnabled(False)

        self.clearStatusLabels()
        for button in self.report_buttons:
            button.setEnabled(False)
        for lineEdit in self.line_edits:
            lineEdit.setText('')
        for comboBox in self.combo_boxes:
            comboBox.setCurrentIndex(0)
        for textBrowser in self.text_browsers:
            textBrowser.clear()
            if textBrowser.objectName().endswith('info_textBrowser'):
                textBrowser.append("Information about progress")
            elif textBrowser.objectName().endswith('results_textBrowser'):
                textBrowser.append("Results")
        self.ui.p_span_section_radioBtn.setChecked(True)
        self.ui.b_sup_section_radioBtn.setChecked(True)

    def logout(self, closeAfter=False):
        """
        Log the user out from the session

        Check whether user was logged in, make a request to the log out URL in order
        to log the user out from the session. If closeAfter is True, close the application after the request.

        Parameters
        ----------
        closeAfter : bool, optional
            If true, close the application after logging the user out

        Returns
        -------
        None
        """
        if self.ui.stackedWidget.currentIndex() != 0:
            self.logout_signal.emit()
        try:
            self.session.get(f'{Main.host}/accounts/logout/', headers={'Connection': 'close'})
        except Exception:
            pass
        finally:
            if closeAfter:
                self.close()

    def getCalculationResults(self):
        """
        Request calculations of the element. If successful, call function to load the results, otherwise display error.

        Read properties of the element, parse them to the json format and send them in the POST request to the
        dedicated calculation URL. If the server's response status code is equal to 200, emit obtainedResults signal
        and save the results to an instance parameter. Otherwise, display error message depending on the reason.

        Parameters
        ----------
        None

        Returns
        -------
        bool
        """
        element_parameters = self.getElementProperties()
        if element_parameters:
            parameters_json_string = json.dumps(element_parameters)
            try:
                token = self.session.get(f'{Main.host}/run-calculations/')
                response = self.session.post(f'{Main.host}/run-calculations/', data={
                    'csrfmiddlewaretoken': token,
                    'task_parameters': parameters_json_string,
                })
            except ConnectionError:
                self.error_signal.emit("Error while communicating with the server. Check your connection and try again.")
                return False
            except Exception:
                self.error_signal.emit("An unknown error occurred, contact the app administrator.")
                return False
            if response.status_code == 200:
                self.last_results = json.loads(response.text)
                self.obtainedResults_signal.emit()
                return True
        return False

    def loadResults(self):
        """
        Load the calculation results to the GUI components

        Access the information container objects of the currently displayed screen and clear them.
        Depending on the range of completed calculations, display various messages to the information container objects.
        Enable report button on the currently displayed screem, disable others.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        results_tab = self.ui.results_stackedWidget.currentWidget()
        tab_code = results_tab.objectName()[0]

        results = self.last_results

        task_info = results_tab.findChild(QtWidgets.QTextBrowser, f'{tab_code}_info_textBrowser')
        task_results = results_tab.findChild(QtWidgets.QTextBrowser, f'{tab_code}_results_textBrowser')

        task_info.clear()
        task_results.clear()

        if all(results['required_area']):
            required_area = f"Required reinforcement area for reinforcement group/s: " \
                            f"{', '.join([str(round(area * 10_000, 4)) for area in results['required_area']], )} cm^2."
            task_results.append(required_area)

            if all(results['provided_area']):
                provided_area = f"Assumed reinforcement area for reinforcement group/s: " \
                    f"{', '.join([str(round(area*10_000, 4)) for area in results['provided_area']])} cm^2."
                task_results.append(provided_area)
                if tab_code == 'b' or tab_code == 'c':
                    provided_reinforcement = f"Resulting reinforcement for reinforcement group/s: " \
                        f"{', '.join([str(round(bars, 2)) for bars in results['provided_reinforcement']])} rebars."
                elif tab_code == 'p' or tab_code == 'f':
                    provided_reinforcement = f"Resulting reinforcement for reinforcement group/s: rebars placed every" \
                        f" {', '.join([str(round(spacing*100, 2)) for spacing in results['provided_reinforcement']])} cm."
            else:
                provided_reinforcement = "Wasn't able to find reinforcement fulfilling requirements for selected element."
        else:
            provided_reinforcement = "Wasn't able to find reinforcement fulfilling requirements for selected element."

        task_results.append(provided_reinforcement)

        for remark in results['remarks']:
            task_info.append(remark)

        results_tab.findChild(QtWidgets.QPushButton, f'{tab_code}_report_btn').setEnabled(True)
        self.disableReportButtons(current_tab=results_tab, leave_current=True)

    def disableReportButtons(self, current_tab, leave_current=False):
        """
        Disable report buttons

        Prepare a list of button objects, including or excluding the one on the current screen,
        depending on the leave_current parameter. Disable each button in the list using setEnabled method.

        Parameters
        ----------
        current_tab : QWidget
            Object of the currently displayed GUI tab
        leave_current : bool, optional
            Prevent from disabling the button on the current GUI screen if set to True

        Returns
        -------
        None
        """
        report_buttons = [button for button in self.report_buttons]
        if leave_current:
            report_buttons = [button for button in report_buttons if button.parent() != current_tab]
        for button in report_buttons:
            button.setEnabled(False)

    def getCurrentElement(self, elements_list, parent):
        """
        Return object from a list that is a child of provided parent object

        Parameters
        ----------
        elements_list : list
            List containing certain type of Qt objects
        parent : QWidget
            Parent object of desired returned object
        Returns
        -------
        QtWidgets object
        """
        return next((element for element in elements_list if element.parent() == parent), None)

    def getCurrentTab(self):
        """
        Return the object of currently displayed tab

        Parameters
        ----------
        None

        Returns
        -------
        QtWidget
        """
        if self.ui.stackedWidget.currentIndex() == 0:
            return self.ui.login_page
        return self.ui.elements_tabs.currentWidget()

    def displayError(self, error_message):
        """
        Display error message on the status label of the currently displayed screen

        Parameters
        ----------
        error_message : str

        Returns
        -------
        None
        """
        current_tab = self.getCurrentTab()
        status_label = self.getCurrentElement(self.status_labels, current_tab)
        status_label.setText(error_message)


class Worker(QtCore.QThread):
    """
    Thread worker class

    Attributes
    ----------
    None
    """
    def __init__(self, fn, **kwargs):
        """
        Extend QThread __init__ method, initialize instance parameters

        Parameters
        ----------
        fn : function
            Function to be run concurrently by the thread worker
        kwargs : dict
            List of keyword arguments to be provided to the function

        Returns
        -------
        None
        """
        super().__init__()
        self.fn = fn
        self.kwargs = kwargs

    def run(self):
        """
        Run function provided on instance definition, provide keyword arguments if given.

        Parameters
        ----------
        None

        Returns
        -------
        None
        """
        if self.kwargs:
            self.fn(self.kwargs)
        else:
            self.fn()


if __name__ == '__main__':
    import sys

    app = QtWidgets.QApplication(sys.argv)
    dialog = QtWidgets.QDialog()
    window = Main()
    window.show()
    sys.exit(app.exec_())
